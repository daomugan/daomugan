//
//  videoViewcontroller.swift
//  CarPooling
//
//  Created by mjl-PC on 14/11/12.
//  Copyright (c) 2014年 MFFamily. All rights reserved.
//

import Foundation
import MediaPlayer
import UIKit

class videoViewController: UIViewController {
    var mediaPlayer:MPMoviePlayerController?
    
    @IBOutlet var imgVedioBounds: UIImageView!
    override func viewDidLoad() {
        super.viewDidLoad()
        NSLog("jj")
        let url = NSBundle.mainBundle().pathForResource("test1.mp4", ofType: nil)
        NSLog(url!)
        mediaPlayer = MPMoviePlayerController(contentURL: NSURL(fileURLWithPath: url!))
        mediaPlayer?.prepareToPlay()
        self.view.addSubview(mediaPlayer!.view)
        mediaPlayer?.shouldAutoplay = true
        mediaPlayer?.view.frame = imgVedioBounds.bounds
        mediaPlayer?.controlStyle = MPMovieControlStyle.None
        imgVedioBounds.bounds.size = CGSize(width: 100, height: 200)
        NSLog("%d  %d  %d  %d", imgVedioBounds.bounds.size.height,imgVedioBounds.bounds.width,imgVedioBounds.bounds.minX,imgVedioBounds.bounds.minY)
        NSLog("\(self.view.frame)")
    }
}


package com.rd.callcar;

import java.util.ArrayList;
import java.util.List;

import com.rd.callcar.Util.ExitApplication;
import com.rd.callcar.adapter.ComplantAdapter;
import com.rd.callcar.entity.CallHistory;
import com.rd.callcar.json.getJson;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.ListView;

public class toubiaoActivity extends Activity {

	private List<CallHistory> list=new ArrayList<CallHistory>();
	private Button back, button_say, button_complant;
	private ListView complantList;

	private ProgressDialog pro = null;

	private final int feedkbackSuccess = 0;
	final int fedkbackFail = 1;
	App app = null;
	ComplantAdapter adapter;

	@SuppressWarnings("unchecked")
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.complant_layout);
		ExitApplication.getInstance().addActivity(this);

	//	list = (List<CallHistory>) getIntent().getSerializableExtra("data");
		CallHistory history = new CallHistory();
		history.setsituation("您好，我在您的附近，我与您同路，想搭载您的的顺风车！");
        list.add(history);
		app = (App) getApplication();

		// 初始化加载对话框
		pro = new ProgressDialog(this);
		pro.setProgressStyle(ProgressDialog.STYLE_SPINNER);
		pro.setTitle("提示");
		pro.setIcon(android.R.drawable.ic_dialog_info);
		pro.setMessage("正在提交，请稍候……");
		pro.setIndeterminate(false);
		pro.setCancelable(true);

		complantList = (ListView) findViewById(R.id.complantList);
		adapter = new ComplantAdapter(this, list);
		complantList.setAdapter(adapter);
		complantList.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
					long arg3) {
				adapter.CheckOnlyOne(arg2);
			}
		});

		back = (Button) findViewById(R.id.back);
		button_say = (Button) findViewById(R.id.button_say);
		button_complant = (Button) findViewById(R.id.button_complant);
		back.setOnClickListener(new OnClk());
		button_say.setOnClickListener(new OnClk());
		button_complant.setOnClickListener(new OnClk());
	}

	class OnClk implements OnClickListener {
		@Override
		public void onClick(View v) {
			switch (v.getId()) {
			case R.id.back:
				toubiaoActivity.this.finish();
				break;
			case R.id.button_say:
				startActivity(new Intent(toubiaoActivity.this,
						CompantEnterActivity.class));
				break;
			case R.id.button_complant:
				ShowDD();
				break;
			}
		}
	}

	private void ShowDD() {
		if (adapter.getSelect() == null) {
			app.ShowToast("请选择一个发布内容！");
			return;
		}

		final AlertDialog alertDialog = new AlertDialog.Builder(
				toubiaoActivity.this)
				.setTitle(R.string.Hint)
				.setMessage("您确定要进行发布吗？")
				.setPositiveButton(R.string.sure,
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog,
									int which) {
								Complant();
							}
						})
				.setNegativeButton(R.string.cancel,
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog,
									int which) {
								dialog.dismiss();
							}
						}).create();
		alertDialog.show();
	}

	private void Complant() {
		pro.show();
		new Thread(new Runnable() {

			public void run() {
				try {
					boolean isSub = getJson.isComplantSelect(app.getUSerid(),
							adapter.getSelect().getSeqid());
					if (isSub) {
						Message message = new Message();
						message.what = feedkbackSuccess;
						handler.sendMessage(message);
					} else {
						Message message = new Message();
						message.what = fedkbackFail;
						handler.sendMessage(message);
					}
				} catch (Exception e) {
					Message message = new Message();
					message.what = fedkbackFail;
					handler.sendMessage(message);
				}
			}
		}).start();
	}

	private Handler handler = new Handler() {

		@Override
		public void handleMessage(Message msg) {
			super.handleMessage(msg);
			pro.dismiss();
			switch (msg.what) {
			case feedkbackSuccess:
				app.ShowToast("发布成功！");
				break;
			case fedkbackFail:
				app.ShowToast("发布失败！");
				break;
			}
		}
	};
}



package com.rd.callcar;

import com.rd.callcar.Util.ExitApplication;
import com.rd.callcar.adapter.ChooseAdapter;
import com.rd.callcar.data.staticData;
import com.rd.callcar.db.SQLiteHelper;
import com.rd.callcar.entity.HistoryBean;
import com.rd.callcar.entity.PointInfo;
import com.rd.callcar.json.getJson;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.preference.PreferenceManager;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

public class StepTwo extends Activity {

	private AutoCompleteTextView endName;
	private String[] autoString;
	private SQLiteHelper mOpenHelper;

	private ListView customerChooseList;
	private TextView ShowDropDown;
	private Button nextStep, back;

	private ProgressDialog mpDialog;
	App app;

	final int LOGINSUCCESS_MSG = 0;
	final int LOGINFAIL_MSG = 1;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.twostep_layout);
		ExitApplication.getInstance().addActivity(this);

		app = (App) this.getApplication();
		mOpenHelper = new SQLiteHelper(this);

		// 初始化加载对话框
		mpDialog = new ProgressDialog(this);
		mpDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
		mpDialog.setTitle(R.string.loading_data);
		mpDialog.setIcon(android.R.drawable.ic_dialog_info);
		mpDialog.setMessage(getString(R.string.sending));
		mpDialog.setIndeterminate(false);
		mpDialog.setCancelable(true);

		getHistory();
		endName = (AutoCompleteTextView) findViewById(R.id.endName);
		ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,
				R.layout.list_item, autoString);
		endName.setAdapter(adapter);

		ShowDropDown = (TextView) findViewById(R.id.ShowDropDown);
		customerChooseList = (ListView) findViewById(R.id.customerChooseList);

		ShowDropDown.setOnClickListener(new OnClick());
		ChooseAdapter cadapter = new ChooseAdapter(this, staticData.getList());
		customerChooseList.setAdapter(cadapter);
		customerChooseList.setOnItemClickListener(new OnItem());

		nextStep = (Button) findViewById(R.id.nextStep);
		nextStep.setOnClickListener(new OnClick());

		back = (Button) findViewById(R.id.back);
		back.setOnClickListener(new OnClick());
	}

	class OnItem implements OnItemClickListener {
		@Override
		public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
				long arg3) {
			customerChooseList.setVisibility(View.GONE);
			ShowDropDown.setText(((TextView) arg1.findViewById(R.id.text))
					.getText());
		}
	}

	class OnClick implements OnClickListener {
		@Override
		public void onClick(View v) {
			switch (v.getId()) {
			case R.id.ShowDropDown:
				if (customerChooseList.getVisibility() == View.VISIBLE) {
					customerChooseList.setVisibility(View.GONE);
				} else {
					customerChooseList.setVisibility(View.VISIBLE);
				}
				InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);

				imm.hideSoftInputFromWindow(endName.getWindowToken(), 0);
				break;
			case R.id.nextStep:
				goNext();
				break;
			case R.id.back:
				StepTwo.this.finish();
				break;
			}
		}
	}

	private void goNext() {
		String teminal = endName.getText().toString().trim();
		String type = ShowDropDown.getText().toString().trim();
		if (teminal.equals("")) {
			ShowToast(R.string.enterEnd);
			return;
		}

		if (type.equals(R.string.chooseCustomer)) {
			ShowToast(R.string.chooseType);
			return;
		}

		insertTable(teminal);

		SaveEnd("key", teminal);
		SaveEnd("type", type);

		ShowSureDialog();
	}

	private void ShowSureDialog() {
		final AlertDialog alertDialog = new AlertDialog.Builder(StepTwo.this)
				.setTitle(R.string.sureCall)
				.setMessage(
						String.format(getString(R.string.callMsg),
								getSave("key"),
								staticData.numByChoose(getSave("type"))))
				.setPositiveButton(R.string.sure,
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog,
									int which) {
								SendInfoToServer();
							}
						})
				.setNegativeButton(R.string.cancel,
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog,
									int which) {
								dialog.dismiss();
								// startActivity(new Intent(StepTwo.this,
								// StepOne.class));
							}
						}).create();
		alertDialog.show();
	}

	private void SendInfoToServer() {

		mpDialog.show();

		final PointInfo info = new PointInfo();
		info.setUserid(app.getUSerid());
		info.setCity(getSave("city"));
		info.setLang(getSave("lang"));
		info.setLant(getSave("lant"));
		info.setType(getSave("type"));
		info.setDestnation(getSave("key"));

		new Thread(new Runnable() {

			@Override
			public void run() {
				try {
					int isLogin = getJson.SendInfo(info);
					Message message = new Message();
					message.what = LOGINSUCCESS_MSG;
					message.obj = isLogin;
					mhandler.sendMessage(message);
				} catch (Exception e) {
					Message message = new Message();
					message.what = LOGINFAIL_MSG;
					mhandler.sendMessage(message);
				}
			}
		}).start();
	}

	// 线程处理
	private Handler mhandler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			mpDialog.dismiss();
			switch (msg.what) {
			case LOGINSUCCESS_MSG:
				if (((Integer) msg.obj).equals(-1)) {
					ShowToast("您已叫车，请勿重复叫车！");
				}else if(((Integer) msg.obj).equals(-100))
				{ ShowToast("发布信息失败，请重试！"); }
				else {
					SaveEnd("backId", String.valueOf(msg.obj));
					// startActivity(new Intent(StepTwo.this,
					// CallSuccess.class));
					startActivity(new Intent(StepTwo.this, StepThree.class));
				}
				break;
			case LOGINFAIL_MSG:
				ShowToast("叫车失败！");
				break;
			}
		}
	};

	private void SaveEnd(String type, String begin) {
		PreferenceManager.getDefaultSharedPreferences(getApplicationContext())
				.edit().putString(type, begin).commit();
	}

	private String getSave(String key) {
		return PreferenceManager.getDefaultSharedPreferences(
				getApplicationContext()).getString(key, "");
	}

	private void ShowToast(int res) {
		Toast.makeText(this, res, Toast.LENGTH_SHORT).show();
	}

	private void ShowToast(String res) {
		Toast.makeText(this, res, Toast.LENGTH_SHORT).show();
	}

	/* 往表中插入数据 */
	private void insertTable(String title) {
		try {
			SQLiteDatabase db = mOpenHelper.getWritableDatabase();
			Cursor myCursor_one = db.rawQuery("SELECT * FROM "
					+ SQLiteHelper.TB_NAME + " where name=?",
					new String[] { String.valueOf(title) });
			String sql;
			String tip;
			if (myCursor_one.moveToFirst()) {
				sql = "update " + SQLiteHelper.TB_NAME + " set "
						+ HistoryBean.TIME + "=datetime('now') where "
						+ HistoryBean.NAME + "='" + title + "'";
				tip = "更新";
			} else {
				sql = "insert into " + SQLiteHelper.TB_NAME + " ("
						+ HistoryBean.TIME + ", " + HistoryBean.NAME + ") "
						+ "values( datetime('now'),'" + title + "');";
				tip = "插入";
			}
			try {
				myCursor_one.close();
				myCursor_one = null;
				db.execSQL(sql);
			} catch (SQLException e) {
				Toast.makeText(StepTwo.this, tip + "记录出错", Toast.LENGTH_LONG)
						.show();
				return;
			}
		} catch (Exception e) {
		}
	}

	// 取得历史记录
	private void getHistory() {
		try {
			Cursor myCursor_one;
			SQLiteDatabase db = mOpenHelper.getWritableDatabase();

			myCursor_one = db.rawQuery("SELECT * FROM " + SQLiteHelper.TB_NAME
					+ " order by " + HistoryBean.TIME + " desc", null);
			int name = myCursor_one.getColumnIndex(HistoryBean.NAME);
			autoString = new String[myCursor_one.getCount()];
			int i = 0;
			if (myCursor_one.moveToFirst()) {
				do {
					autoString[i] = myCursor_one.getString(name);
					i++;
				} while (myCursor_one.moveToNext());
			}
			myCursor_one.close();
			db.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}


package com.rd.callcar;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

import com.baidu.mapapi.BMapManager;
import com.baidu.mapapi.GeoPoint;
import com.baidu.mapapi.LocationListener;
import com.baidu.mapapi.MKAddrInfo;
import com.baidu.mapapi.MKBusLineResult;
import com.baidu.mapapi.MKDrivingRouteResult;
import com.baidu.mapapi.MKLine;
import com.baidu.mapapi.MKPlanNode;
import com.baidu.mapapi.MKPoiResult;
import com.baidu.mapapi.MKSearch;
import com.baidu.mapapi.MKSearchListener;
import com.baidu.mapapi.MKSuggestionResult;
import com.baidu.mapapi.MKTransitRouteResult;
import com.baidu.mapapi.MKWalkingRouteResult;
import com.baidu.mapapi.MapActivity;
import com.baidu.mapapi.MapController;
import com.baidu.mapapi.MapView;
import com.baidu.mapapi.MyLocationOverlay;
import com.baidu.mapapi.RouteOverlay;
import com.baidu.mapapi.TransitOverlay;
import com.rd.callcar.Util.ExitApplication;
import com.rd.callcar.data.staticData;
import com.rd.callcar.entity.PointInfo;
import com.rd.callcar.json.getJson;
import com.rd.callcar.view.MarqueeText;

import android.app.AlertDialog;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.location.Location;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.preference.PreferenceManager;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

public class StepThree extends MapActivity {

	MapView mMapView = null; // 地图View
	MKSearch mSearch = null; // 搜索模块，也可去掉地图模块独立使用
	MapController mMapController;

	private Button refresh, local, back, detail;

	private ProgressDialog mpDialog;
	Dialog dialog = null;

	final int LOGINSUCCESS_MSG = 0;
	final int LOGINFAIL_MSG = 1;
	final int getAddSuccess = 2;
	final int getAddFail = 3;
	App app;
	TextView loadText;
	MarqueeText line;
	List<String> step;
	int numSteps = 0;

	LocationListener mLocationListener = null;// onResume时注册此listener，onPause时需要Remove
	MyLocationOverlay mLocationOverlay = null; // 定位图层

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.threestep_layout);
		ExitApplication.getInstance().addActivity(this);

		app = (App) this.getApplication();
		if (app.mBMapMan == null) {
			app.mBMapMan = new BMapManager(getApplication());
			app.mBMapMan.init(app.mStrKey, new App.MyGeneralListener());
		}
		app.mBMapMan.start();
		// 如果使用地图SDK，请初始化地图Activity
		super.initMapActivity(app.mBMapMan);

		line = (MarqueeText) findViewById(R.id.line);
		mMapView = (MapView) findViewById(R.id.bmapView);
		mMapView.setBuiltInZoomControls(true);
		// 设置在缩放动画过程中也显示overlay,默认为不绘制
		mMapView.setDrawOverlayWhenZooming(true);
		mMapView.setBuiltInZoomControls(true);
		// 初始化搜索模块，注册事件监听
		mMapController = mMapView.getController(); // 得到mMapView的控制权,可以用它控制和驱动平移和缩放
		GeoPoint point = new GeoPoint((int) (39.915 * 1E6),
				(int) (116.404 * 1E6)); // 用给定的经纬度构造一个GeoPoint，单位是微度 (度 * 1E6)
		mMapController.setCenter(point); // 设置地图中心点
		// mMapController.setZoom(12); // 设置地图zoom级别
		//
		// // 初始化搜索模块，注册事件监听
		mSearch = new MKSearch();
		mSearch.setTransitPolicy(MKSearch.EBUS_TRANSFER_FIRST);
		mSearch.init(app.mBMapMan, new MKSearchListener() {

			@Override
			public void onGetPoiDetailSearchResult(int type, int error) {
			}

			public void onGetDrivingRouteResult(MKDrivingRouteResult res,
					int error) {
				// 错误号可参考MKEvent中的定义
				if (error != 0 || res == null) {
					loadText.setText("定位失败！");
					// refresh.setEnabled(false);
					Toast.makeText(StepThree.this, "抱歉，未找到结果",
							Toast.LENGTH_SHORT).show();
					return;
				}
				loadText.setVisibility(View.GONE);
				mMapView.setVisibility(View.VISIBLE);
				line.setVisibility(View.VISIBLE);

				RouteOverlay routeOverlay = new RouteOverlay(StepThree.this,
						mMapView);
				// 此处仅展示一个方案作为示例
				routeOverlay.setData(res.getPlan(0).getRoute(0));
				mMapView.getOverlays().clear();
				mMapView.getOverlays().add(routeOverlay);
				mMapView.invalidate();

				mMapView.getController().animateTo(res.getStart().pt);

				mkStep(res, null, null);
			}

			public void onGetTransitRouteResult(MKTransitRouteResult res,
					int error) {
				if (error != 0 || res == null) {
					Toast.makeText(StepThree.this, "抱歉，未找到结果",
							Toast.LENGTH_SHORT).show();
					return;
				}
				TransitOverlay routeOverlay = new TransitOverlay(
						StepThree.this, mMapView);
				// 此处仅展示一个方案作为示例
				routeOverlay.setData(res.getPlan(0));
				mMapView.getOverlays().clear();
				mMapView.getOverlays().add(routeOverlay);
				mMapView.invalidate();

				mMapView.getController().animateTo(res.getStart().pt);
			}

			public void onGetWalkingRouteResult(MKWalkingRouteResult res,
					int error) {
				if (error != 0 || res == null) {
					Toast.makeText(StepThree.this, "抱歉，未找到结果",
							Toast.LENGTH_SHORT).show();
					return;
				}
				RouteOverlay routeOverlay = new RouteOverlay(StepThree.this,
						mMapView);
				// 此处仅展示一个方案作为示例
				routeOverlay.setData(res.getPlan(0).getRoute(0));
				mMapView.getOverlays().clear();
				mMapView.getOverlays().add(routeOverlay);
				mMapView.invalidate();

				mMapView.getController().animateTo(res.getStart().pt);

			}

			public void onGetAddrResult(MKAddrInfo res, int error) {
			}

			public void onGetPoiResult(MKPoiResult res, int arg1, int arg2) {
			}

			public void onGetBusDetailResult(MKBusLineResult result, int iError) {
			}

			@Override
			public void onGetSuggestionResult(MKSuggestionResult res, int iError) {

				if (iError != 0 || res == null) {

					Toast.makeText(StepThree.this, "抱歉，未找到结果",
							Toast.LENGTH_LONG).show();

					return;

				}

				int nSize = res.getSuggestionNum();

				String[] mStrSuggestions = new String[nSize];

				for (int i = 0; i < nSize; i++) {

					mStrSuggestions[i] = res.getSuggestion(i).city
							+ res.getSuggestion(i).key;
				}

				ListView list = new ListView(StepThree.this);
				ArrayAdapter<String> adapter = new ArrayAdapter<String>(
						StepThree.this,
						android.R.layout.simple_selectable_list_item,
						mStrSuggestions);
				list.setAdapter(adapter);
				list.setCacheColorHint(0);
				dialog = new AlertDialog.Builder(StepThree.this).setTitle("路线")
						.setPositiveButton("确定", null).setView(list).create();
				//
				// ArrayAdapter<String> suggestionString = new
				// ArrayAdapter<String>(
				// StepThree.this, android.R.layout.simple_list_item_1,
				// mStrSuggestions);
				//
				// mSuggestionList.setAdapter(suggestionString);

			}

			@Override
			public void onGetRGCShareUrlResult(String arg0, int arg1) {

			}
		});

		mMapController.setZoom(18); // 设置地图zoom级别

		// 添加定位图层
		mLocationOverlay = new MyLocationOverlay(this, mMapView);
		mMapView.getOverlays().add(mLocationOverlay);

		// 注册定位事件
		mLocationListener = new LocationListener() {

			@Override
			public void onLocationChanged(Location location) {
				if (location != null) {
					GeoPoint pt = new GeoPoint(
							(int) (location.getLatitude() * 1e6),
							(int) (location.getLongitude() * 1e6));
					mMapView.getController().animateTo(pt);

					final double lang = location.getLatitude();
					final double lant = location.getLongitude();

					new Thread(new Runnable() {

						@Override
						public void run() {
							try {
								String add = getJson.getAddress(lang, lant,
										StepThree.this);
								if (add != "") {
									Message message = new Message();
									message.what = getAddSuccess;
									message.obj = add;
									handler.sendMessage(message);
								} else {
									Message message = new Message();
									message.what = getAddFail;
									handler.sendMessage(message);
								}
							} catch (Exception e) {
								Message message = new Message();
								message.what = getAddFail;
								handler.sendMessage(message);
							}
						}
					}).start();
				}
			}
		};

		// 初始化加载对话框
		mpDialog = new ProgressDialog(this);
		mpDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
		mpDialog.setTitle(R.string.loading_data);
		mpDialog.setIcon(android.R.drawable.ic_dialog_info);
		mpDialog.setMessage(getString(R.string.sending));
		mpDialog.setIndeterminate(false);
		mpDialog.setCancelable(true);

		refresh = (Button) findViewById(R.id.refresh);
		refresh.setText("取消叫车");
		refresh.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// ShowSureDialog();
				Cancel();
			}
		});

		local = (Button) findViewById(R.id.local);
		local.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				SearchButtonProcess();
			}
		});

		back = (Button) findViewById(R.id.back);
		back.setVisibility(View.GONE);
		back.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				StepThree.this.finish();
			}
		});

		detail = (Button) findViewById(R.id.detail);
		//detail.setVisibility(View.GONE);
		detail.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
			//	dialog.show();
			}
		});

		loadText = (TextView) findViewById(R.id.loadText);

		// SearchButtonProcess();
	}

	private void Cancel() {
		mpDialog.show();
		ShowToast(getSave("backId"));
		new Thread(new Runnable() {

			@Override
			public void run() {
				try {
					boolean isCancel =getJson.cancelCall(app.getUSerid(),getSave("backId"));
					if (isCancel) {
						Message message = new Message();
						message.what = LOGINSUCCESS_MSG;
						handler.sendMessage(message);
					} else {
						Message message = new Message();
						message.what = LOGINFAIL_MSG;
						handler.sendMessage(message);
					}
				} catch (Exception e) {
					Message message = new Message();
					message.what = LOGINFAIL_MSG;
					handler.sendMessage(message);
				}
			}
		}).start();
	}

	// 线程处理
	private Handler handler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			mpDialog.dismiss();
			switch (msg.what) {
			case LOGINSUCCESS_MSG:
				ShowToast("取消打车成功！");
				startActivity(new Intent(StepThree.this, StepOne.class));
				StepThree.this.finish();
				break;
			case LOGINFAIL_MSG:
				ShowToast("取消打车失败！");
				break;
			case getAddFail:
				loadText.setText("定位失败，请稍后重试！");
				break;
			case getAddSuccess:
				mMapView.setVisibility(View.VISIBLE);
				loadText.setVisibility(View.GONE);
				break;
			}
		}
	};

	@SuppressWarnings("unused")
	private void ShowSureDialog() {
		final AlertDialog alertDialog = new AlertDialog.Builder(StepThree.this)
				.setTitle(R.string.sureCall)
				.setMessage(
						String.format(getString(R.string.callMsg),
								getSave("key"),
								staticData.numByChoose(getSave("type"))))
				.setPositiveButton(R.string.sure,
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog,
									int which) {
								SendInfoToServer();
							}
						})
				.setNegativeButton(R.string.cancel,
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog,
									int which) {
								startActivity(new Intent(StepThree.this,
										StepOne.class));
							}
						}).create();
		alertDialog.show();
	}

	private void SendInfoToServer() {

		mpDialog.show();

		final PointInfo info = new PointInfo();
		info.setUserid(app.getUSerid());
		info.setCity(getSave("city"));
		info.setLang(getSave("lang"));
		info.setLant(getSave("lant"));
		info.setType(getSave("type"));
		info.setDestnation(getSave("key"));

		new Thread(new Runnable() {

			@Override
			public void run() {
				try {
					int isLogin = getJson.SendInfo(info);
					Message message = new Message();
					message.what = LOGINSUCCESS_MSG;
					message.obj = isLogin;
					mhandler.sendMessage(message);
				} catch (Exception e) {
					Message message = new Message();
					message.what = LOGINFAIL_MSG;
					mhandler.sendMessage(message);
				}
			}
		}).start();
	}

	// 线程处理
	private Handler mhandler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			mpDialog.dismiss();
			switch (msg.what) {
			case LOGINSUCCESS_MSG:
				if (((Integer) msg.obj).equals(-1)) {
					ShowToast("您已叫车，请勿重复叫车！");
				} else {
					SaveEnd("backId", String.valueOf(msg.obj));
					startActivity(new Intent(StepThree.this, CallSuccess.class));
				}
				break;
			case LOGINFAIL_MSG:
				ShowToast("叫车失败！");
				break;
			}
		}
	};

	private void ShowToast(String msg) {
		Toast.makeText(this, msg, Toast.LENGTH_SHORT).show();
	}

	void SearchButtonProcess() {
		// 对起点终点的name进行赋值，也可以直接对坐标赋值，赋值坐标则将根据坐标进行搜索
		MKPlanNode stNode = new MKPlanNode();
		stNode.pt = getFromSave();
		MKPlanNode enNode = new MKPlanNode();
		enNode.name = getSave("key");

		// 实际使用中请对起点终点城市进行正确的设定
		mSearch.drivingSearch("", stNode, getSave("city"), enNode);
		// mSearch.suggestionSearch(getSave("city"));
		loadText.setVisibility(View.VISIBLE);
	}

	public void mkStep(MKDrivingRouteResult res1, MKTransitRouteResult res2,
			MKWalkingRouteResult res3) {
		step = new ArrayList<String>();
		if (res1 != null) {
			numSteps = res1.getPlan(0).getRoute(0).getNumSteps() - 1;
			if (numSteps > 0) {
				for (int i = 0; i < numSteps; i++) {
					step.add(res1.getPlan(0).getRoute(0).getStep(i)
							.getContent());
				}
			}

			DecimalFormat decimalFormat = new DecimalFormat(".#");
			double c = Double.parseDouble(decimalFormat.format(res1.getPlan(0)
					.getRoute(0).getDistance() * 1.0 / 1000));

			line.setText("总路程：" + res1.getPlan(0).getRoute(0).getDistance()
					+ "米 约:" + c + "公里");
		} else if (res2 != null) {
			numSteps = res2.getPlan(0).getNumLines();
			int i;
			int j1 = res2.getPlan(0).getNumRoute();
			if (numSteps > 0) {
				for (i = 0; i < numSteps; i++) {
					MKLine line = res2.getPlan(0).getLine(i);
					if (line.getType() == MKLine.LINE_TYPE_BUS) {
						step.add("乘坐公交" + line.getTitle() + "路");
						step.add("自" + line.getGetOnStop().name + "经过"
								+ line.getNumViaStops() + "站到"
								+ line.getGetOffStop().name + "---"
								+ line.getDistance() + "m");

					} else if (line.getType() == MKLine.LINE_TYPE_SUBWAY) {
						step.add("乘坐" + line.getTitle());
						step.add("自" + line.getGetOnStop().name + "经过"
								+ line.getNumViaStops() + "站到"
								+ line.getGetOffStop().name + "---"
								+ line.getDistance() + "m");

					}
					if (i <= j1)
						step.add("在" + line.getGetOffStop().name + "下车，步行"
								+ res2.getPlan(0).getRoute(i + 1).getDistance()
								+ "m");
				}
			}
			step.add("到达终点");
		} else {
			numSteps = res3.getPlan(0).getRoute(0).getNumSteps() - 1;
			if (numSteps > 0) {
				for (int i = 0; i < numSteps; i++) {
					step.add(res3.getPlan(0).getRoute(0).getStep(i)
							.getContent());
				}
			}
		}
		if (numSteps > 0) {
			ListView list = new ListView(this);
			ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,
					android.R.layout.simple_selectable_list_item, step);
			list.setAdapter(adapter);
			list.setCacheColorHint(0);
			dialog = new AlertDialog.Builder(StepThree.this).setTitle("路线")
					.setPositiveButton("确定", null)
					// .setNegativeButton("分享到人人",
					// new DialogInterface.OnClickListener() {
					//
					// @Override
					// public void onClick(DialogInterface dialog,
					// int which) {
					// String text = "";
					// for (int i = 0; i < step.size(); i++) {
					// if (i != step.size() - 1)
					// text = text + step.get(i) + "，";
					// else
					// text = text + step.get(i) + "。";
					// }
					// }
					// })
					.setView(list).create();
		}
	}

	private GeoPoint getFromSave() {
		double lang = Double.parseDouble(getSave("lang"));
		double lant = Double.parseDouble(getSave("lant"));
		GeoPoint pt = new GeoPoint((int) (lang * 1e6), (int) (lant * 1e6));
		return pt;
	}

	private String getSave(String key) {
		return PreferenceManager.getDefaultSharedPreferences(
				getApplicationContext()).getString(key, "");
	}

	private void SaveEnd(String type, String begin) {
		PreferenceManager.getDefaultSharedPreferences(getApplicationContext())
				.edit().putString(type, begin).commit();
	}

	@Override
	protected void onPause() {
		App app = (App) this.getApplication();
		app.mBMapMan.getLocationManager().removeUpdates(mLocationListener);
		mLocationOverlay.disableMyLocation();
		// mLocationOverlay.disableCompass(); // 关闭指南针
		app.mBMapMan.stop();
		super.onPause();
	}

	@Override
	protected void onResume() {
		App app = (App) this.getApplication();
		// 注册定位事件，定位后将地图移动到定位点
		app.mBMapMan.getLocationManager().requestLocationUpdates(
				mLocationListener);
		mLocationOverlay.enableMyLocation();
		// mLocationOverlay.enableCompass(); // 打开指南针
		app.mBMapMan.start();

		super.onResume();
	}

	@Override
	protected boolean isRouteDisplayed() {
		return false;
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		if (keyCode == KeyEvent.KEYCODE_BACK) {
			final AlertDialog alertDialog = new AlertDialog.Builder(
					StepThree.this)
					.setTitle(R.string.cacelCall)
					.setMessage(R.string.cancelCallHint)
					.setPositiveButton(R.string.sure,
							new DialogInterface.OnClickListener() {
								public void onClick(DialogInterface dialog,
										int which) {
									Cancel();
								}
							})
					.setNegativeButton(R.string.cancel,
							new DialogInterface.OnClickListener() {
								public void onClick(DialogInterface dialog,
										int which) {
									dialog.dismiss();
								}
							}).create();
			alertDialog.show();
			return false;
		}
		return super.onKeyDown(keyCode, event);
	}
}


package com.rd.callcar;

import com.baidu.mapapi.BMapManager;
import com.baidu.mapapi.GeoPoint;
import com.baidu.mapapi.LocationListener;
import com.baidu.mapapi.MapActivity;
import com.baidu.mapapi.MapController;
import com.baidu.mapapi.MapView;
import com.baidu.mapapi.MyLocationOverlay;
import com.rd.callcar.Util.DialogManager;
import com.rd.callcar.Util.ExitApplication;
import com.rd.callcar.Util.UpdateCustomer;
import com.rd.callcar.adapter.SettingAdapter;
import com.rd.callcar.data.staticData;
import com.rd.callcar.json.getJson;

import android.content.Intent;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.location.Location;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.preference.PreferenceManager;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnKeyListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.TextView;
import android.widget.Toast;

public class StepOne extends MapActivity {

	MapView mMapView = null;
	LocationListener mLocationListener = null;// onResume时注册此listener，onPause时需要Remove
	MyLocationOverlay mLocationOverlay = null; // 定位图层

	String cityName;
	MapController mMapController;

	EditText input_address;

	final int getAddSuccess = 0;
	final int getAddFail = 1;

	Button nextStep, back, local;
	TextView loadText;

	App app;

	PopupWindow popup;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		ExitApplication.getInstance().addActivity(this);

		new UpdateCustomer(this, false).Lgoining();

		app = (App) this.getApplication();
		if (app.mBMapMan == null) {
			app.mBMapMan = new BMapManager(getApplication());
			app.mBMapMan.init(app.mStrKey, new App.MyGeneralListener());
		}
		app.mBMapMan.start();
		// 如果使用地图SDK，请初始化地图Activity
		super.initMapActivity(app.mBMapMan);

		mMapView = (MapView) findViewById(R.id.bmapView);
		mMapView.setBuiltInZoomControls(true);
		// 设置在缩放动画过程中也显示overlay,默认为不绘制
		mMapView.setDrawOverlayWhenZooming(true);
		mMapView.setBuiltInZoomControls(true);
		// 初始化搜索模块，注册事件监听
		mMapController = mMapView.getController(); // 得到mMapView的控制权,可以用它控制和驱动平移和缩放
		GeoPoint point = new GeoPoint((int) (39.915 * 1E6),
				(int) (116.404 * 1E6)); // 用给定的经纬度构造一个GeoPoint，单位是微度 (度 * 1E6)
		mMapController.setCenter(point); // 设置地图中心点
		mMapController.setZoom(18); // 设置地图zoom级别

		// 添加定位图层
		mLocationOverlay = new MyLocationOverlay(this, mMapView);
		mMapView.getOverlays().add(mLocationOverlay);

		// 注册定位事件
		mLocationListener = new LocationListener() {

			@Override
			public void onLocationChanged(Location location) {
				if (location != null) {
					GeoPoint pt = new GeoPoint(
							(int) (location.getLatitude() * 1e6),
							(int) (location.getLongitude() * 1e6));
					mMapView.getController().animateTo(pt);

					final double lang = location.getLatitude();
					final double lant = location.getLongitude();

					input_address.setText(R.string.loadingAdd);
					loadText.setVisibility(View.VISIBLE);
					new Thread(new Runnable() {

						@Override
						public void run() {
							try {
								String add = getJson.getAddress(lang, lant,
										StepOne.this);
								if (add != "") {
									Message message = new Message();
									message.what = getAddSuccess;
									message.obj = add;
									handler.sendMessage(message);
								} else {
									Message message = new Message();
									message.what = getAddFail;
									handler.sendMessage(message);
								}
							} catch (Exception e) {
								Message message = new Message();
								message.what = getAddFail;
								handler.sendMessage(message);
							}
						}
					}).start();
				}
			}
		};

		input_address = (EditText) findViewById(R.id.input_address);

		nextStep = (Button) findViewById(R.id.nextStep);
		nextStep.setOnClickListener(new OnClick());

		back = (Button) findViewById(R.id.back);
		back.setOnClickListener(new OnClick());

		loadText = (TextView) findViewById(R.id.loadText);

		local = (Button) findViewById(R.id.local);
		local.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				app.mBMapMan.getLocationManager().requestLocationUpdates(
						mLocationListener);
				mLocationOverlay.enableMyLocation();
			}
		});
	}

	private Handler handler = new Handler() {

		@Override
		public void handleMessage(Message msg) {
			super.handleMessage(msg);
			switch (msg.what) {
			case getAddFail:
				loadText.setText("定位失败，请稍后重试！");
				input_address.setText(R.string.loadAddFail);
				break;
			case getAddSuccess:
				mMapView.setVisibility(View.VISIBLE);
				loadText.setVisibility(View.GONE);
				input_address.setText((String) msg.obj);
				break;
			}
		}
	};

	class OnClick implements OnClickListener {
		@Override
		public void onClick(View v) {
			switch (v.getId()) {
			case R.id.nextStep:
				if (!app.getLogin()) {
					startActivity(new Intent(StepOne.this, Login.class));
				} else {
					String beignStr = input_address.getText().toString().trim();
					if (beignStr.equals("")
							|| beignStr.equals(R.string.loadingAdd)
							|| beignStr.equals(R.string.loadAddFail)) {
						ShowToast(R.string.beginErr);
					} else {
						SaveBegin(beignStr);
						startActivity(new Intent(StepOne.this, StepTwo.class));
					}
				}
				break;
			case R.id.back:
				ShowPop();
				break;
			}
		}
	}

	private void ShowPop() {
		View view = getLayoutInflater().inflate(R.layout.pop_window2, null);
		LinearLayout tan = (LinearLayout) view.findViewById(R.id.tan);
		ListView settingList = (ListView) view.findViewById(R.id.settingList);
		SettingAdapter adapter = new SettingAdapter(this,
				staticData.getSettingList());
		settingList.setAdapter(adapter);
		settingList.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
					long arg3) {
				if (popup != null) {
					if (popup.isShowing()) {
						popup.dismiss();
					}
				}

				if (!app.getLogin()) {
					startActivity(new Intent(StepOne.this, Login.class));
				} else {
					switch (arg2) {
					case 0:
						startActivity(new Intent(StepOne.this, Login.class));
						break;
					case 1:
						startActivity(new Intent(StepOne.this, Register.class));
						break;
					case 2:
						startActivity(new Intent(StepOne.this, CallRecord.class));
						break;
					case 3:
						startActivity(new Intent(StepOne.this,
								SettingActivity.class));
						break;
					case 4:
						app.SaveLogin(false);
						startActivity(new Intent(StepOne.this, Login.class));
						break;
					case 5:
						new DialogManager().showExitHit(StepOne.this);
						break;
					}
				}
			}
		});

		popup = new PopupWindow(view, LayoutParams.WRAP_CONTENT,
				LayoutParams.WRAP_CONTENT);
		popup.setFocusable(true);
		popup.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
		popup.update();

		if (popup != null) {
			if (popup.isShowing())
				popup.dismiss();
			else {
				popup.showAsDropDown(findViewById(R.id.back), 0, 0);
			}
		}

		tan.setOnKeyListener(new OnKeyListener() {

			public boolean onKey(View v, int keyCode, KeyEvent event) {
				if (event.getAction() == KeyEvent.ACTION_DOWN
						&& keyCode == KeyEvent.KEYCODE_BACK) {
					if (popup != null) {
						if (popup.isShowing()) {
							popup.dismiss();
						}
					}
				}
				return false;
			}
		});
	}

	private void SaveBegin(String begin) {
		PreferenceManager.getDefaultSharedPreferences(getApplicationContext())
				.edit().putString("begin", begin).commit();
	}

	private void ShowToast(int res) {
		Toast.makeText(this, res, Toast.LENGTH_SHORT).show();
	}

	@Override
	protected void onPause() {
		App app = (App) this.getApplication();
		app.mBMapMan.getLocationManager().removeUpdates(mLocationListener);
		mLocationOverlay.disableMyLocation();
		// mLocationOverlay.disableCompass(); // 关闭指南针
		app.mBMapMan.stop();
		super.onPause();
	}

	@Override
	protected void onResume() {
		App app = (App) this.getApplication();
		// 注册定位事件，定位后将地图移动到定位点
		app.mBMapMan.getLocationManager().requestLocationUpdates(
				mLocationListener);
		mLocationOverlay.enableMyLocation();
		// mLocationOverlay.enableCompass(); // 打开指南针
		app.mBMapMan.start();
		super.onResume();
	}

	@Override
	protected boolean isRouteDisplayed() {
		return false;
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		if (keyCode == KeyEvent.KEYCODE_BACK) {
			new DialogManager().showExitHit(this);
			return false;
		}
		return super.onKeyDown(keyCode, event);
	}

}
